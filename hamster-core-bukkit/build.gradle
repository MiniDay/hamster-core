setArchivesBaseName("HamsterCore-Bukkit")

evaluationDependsOn(':hamster-core-common')

configurations {
    oldJar
}

dependencies {
    api(project(":hamster-core-common")) { transitive = false }
    shade(project(":hamster-core-common")) { transitive = false }

    compileOnly('org.spigotmc:spigot-api:1.19.2-R0.1-SNAPSHOT') {
        exclude group: "com.google.code.gson"
    }

    shade 'net.kyori:adventure-platform-bukkit:4.1.2'
    compileOnly('net.milkbowl.vault:VaultAPI:1.7') { transitive = false }
    compileOnly('org.black_ixx:playerpoints:2.1.3') { transitive = false }
    compileOnly("com.comphenix.protocol:ProtocolLib-API:4.4.0") { transitive = false }

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    //noinspection GradlePackageUpdate
    compileOnly 'com.google.code.gson:gson:2.8.0'

    // https://mvnrepository.com/artifact/net.kyori/adventure-platform-bukkit
    api 'net.kyori:adventure-platform-bukkit:4.1.2'
    oldJar 'net.kyori:adventure-platform-bukkit:4.1.2'
    // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp
    api 'com.squareup.okhttp3:okhttp:4.10.0'
    oldJar 'com.squareup.okhttp3:okhttp:4.10.0'
    // https://mvnrepository.com/artifact/com.zaxxer/HikariCP
    compileOnly 'com.zaxxer:HikariCP:5.0.1'
    //noinspection GradlePackageUpdate
    oldJar 'com.zaxxer:HikariCP:4.0.3'
}

processResources {
    inputs.property "version", project.version
    filesMatching("plugin.yml") {
        expand "version": project.version
    }
}

tasks.compileJava.dependsOn(":hamster-core-common:build")
tasks.create("shadowJar", Jar) {
    dependsOn("jar")
    from([
            tasks.jar.outputs.files.collect {
                it.isDirectory() ? it : zipTree(it)
            },
            configurations.shade.collect {
                it.isDirectory() ? it : zipTree(it)
            }
    ])
    destinationDir(getRootProject().buildDir)
}
tasks.build.dependsOn(shadowJar)

tasks.create("oldJar", Jar) {
    dependsOn("jar")
    setClassifier("Old")
    from([
            tasks.jar.outputs.files.collect {
                it.isDirectory() ? it : zipTree(it)
            },
            configurations.shade.collect {
                it.isDirectory() ? it : zipTree(it)
            },
            configurations.oldJar.collect {
                it.isDirectory() ? it : zipTree(it)
            }
    ])
    destinationDir(getRootProject().buildDir)
}
tasks.build.dependsOn(oldJar)